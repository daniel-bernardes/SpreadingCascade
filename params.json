{"name":"Network Epidemic Spreading Cascade","body":"### Simple Epidemic Spreading Simulation\r\n\r\n[complexnetworks.fr](http://complexnetworks.fr)\r\n\r\nDiffusion phenomena are ubiquitous in complex networks, for example: the spread of virus on contact networks, gossip on social networks and files in peer-to-peer (P2P) networks. In these contexts, epidemiological models have established themselves as reference in the study of information spreading. In particular the SIR model is a standard choice since it is a model based upon few assumptions and can be characterized with one parameter, namely the _spreading probability_ _p_. This is the code repository of a C implementation of the simple, discrete-time SIR model.\r\n\r\nGiven a network, represented by a graph, each file spreading corresponds to an independent epidemic in the graph, in which each node is in one of the following states: _susceptible_, _infected_ or _non-interacting_ (sometimes denoted _removed_, hence the acronym SIR). Susceptible nodes do not possess the file and may receive it from an infected node, thus becoming infected. Infected nodes, in turn, spread the file to each of its neighbors, independently, with probability _p_ and become promptly non-interacting thereafter. Although non-interacting nodes remain in this state, infected nodes may unsuccessfully try to infect them sending the file. In this setting, the simulation inputs for each file spreading are:\r\n\r\n* A spreading probability _p_\r\n* An underlying network represented by a graph\r\n* A list of initial providers (nodes which possessed the file at _t=0_)\r\n* A simulation bound (on time or on the number of infected nodes) \r\n\r\nThe simulation proceeds as follows: for each file _F_, we begin with the initial providers in an infected state and the other nodes in a susceptible state. At each step, infected nodes will infect each of its neighbors with probability _p_, becoming non-interacting afterwards. The epidemic continues as long as there are active infected nodes and as long as the simulation bound is not attained. The simulation output will be a list of spreading events, each represented by the following 4-tuplet: _(t P C F)_, where _t > 0_ is a timestamp, and the other three integers are unique ids for provider _P_, client _C_, and transmitted file _F_. In other words, each entry in the output trace corresponds to a transmission of _F_ by _P_ to _C_ at time _t_. Refer to the _README_ for detailed practical information.","tagline":"Simple epidemic spreading cascade simulation in networks","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}